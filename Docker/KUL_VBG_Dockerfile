# Use the base Linux Mint 21 image
FROM linuxmintd/mint21-amd64

# Set the maintainer label
LABEL maintainer="radwanphd@gmail.com"

# Set environment variables to avoid interactive prompts
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Etc/UTC

# Install basic utilities and dependencies
RUN apt-get update && apt-get install -y \
    apt-utils \
    wget \
    curl \
    software-properties-common \
    python3.10 \
    python3.10-venv \
    python3.10-dev \
    python3-pip \
    git \
    build-essential \
    libxt-dev \
    tcsh \
    bc \
    binutils \
    libgomp1 \
    perl \
    psmisc \
    sudo \
    tar \
    unzip \
    uuid-dev \
    vim-common \
    libjpeg62-dev \
    cmake \
    locales \
    g++ \
    gcc \
    make \
    python3-all-dev \
    libeigen3-dev \
    zlib1g-dev \
    libfftw3-dev \
    libgl1-mesa-dev \
    libvulkan-dev \
    qtbase5-dev \
    qtchooser \
    qt5-qmake \
    qtbase5-dev-tools \
    qttools5-dev-tools \
    libqt5svg5-dev \
    libqt5opengl5-dev \
    libqt5x11extras5-dev \
    libxcb1 \
    libxcb-glx0 \
    libxcb-glx0-dev \
    ca-certificates \
    file \
    bzip2 \
    liblzma-dev \
    libffi-dev \
    libssl-dev \
    libdbus-1-dev \
    libxcb-icccm4-dev \
    libxcb-image0-dev \
    libxcb-keysyms1-dev \
    libxcb-randr0-dev \
    libxcb-render-util0-dev \
    libxcb-shape0-dev \
    libxcb-sync-dev \
    libxcb-xfixes0-dev \
    libxcb-xinerama0-dev \
    libxcb-dri3-dev && \
    rm -rf /var/lib/apt/lists/*

# Set locale
RUN locale-gen en_US.UTF-8
ENV LANG="en_US.UTF-8"
ENV LANGUAGE="en_US.UTF-8"
ENV LC_ALL="en_US.UTF-8"

# Install Docker
RUN apt-get update && apt-get install -y \
    apt-transport-https \
    gnupg \
    lsb-release && \
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg && \
    echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu focal stable" > /etc/apt/sources.list.d/docker.list && \
    apt-get update && apt-get install -y docker-ce docker-ce-cli containerd.io

# Install Miniconda
RUN wget --no-check-certificate -qO ~/miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh && \
    chmod +x ~/miniconda.sh && \
    bash ~/miniconda.sh -b -p /opt/conda && \
    rm ~/miniconda.sh && \
    /opt/conda/bin/conda init

# Install CUDA Toolkit 12.5
RUN wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-ubuntu2004.pin && \
    mv cuda-ubuntu2004.pin /etc/apt/preferences.d/cuda-repository-pin-600 && \
    wget https://developer.download.nvidia.com/compute/cuda/12.5.0/local_installers/cuda-repo-ubuntu2004-12-5-local_12.5.0-555.42.02-1_amd64.deb && \
    dpkg -i cuda-repo-ubuntu2004-12-5-local_12.5.0-555.42.02-1_amd64.deb && \
    cp /var/cuda-repo-ubuntu2004-12-5-local/cuda-*-keyring.gpg /usr/share/keyrings/ && \
    apt-get update && \
    apt-get -y install cuda-toolkit-12-5

# Install NVIDIA Container Toolkit
RUN curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | apt-key add - && \
    distribution="ubuntu20.04" && \
    curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | tee /etc/apt/sources.list.d/nvidia-docker.list && \
    apt-get update && apt-get install -y nvidia-container-toolkit

# Install FreeSurfer 6.0.0
ENV FREESURFER_HOME=/usr/local/freesurfer
RUN wget -qO- https://surfer.nmr.mgh.harvard.edu/pub/dist/freesurfer/6.0.0/freesurfer-Linux-centos6_x86_64-stable-pub-v6.0.0.tar.gz | tar -xz -C /usr/local && \
    echo "export FREESURFER_HOME=/usr/local/freesurfer" >> /etc/profile.d/freesurfer.sh && \
    echo "source \$FREESURFER_HOME/SetUpFreeSurfer.sh" >> /etc/profile.d/freesurfer.sh

# Copy FreeSurfer license
# COPY freesurfer_license.txt /usr/local/freesurfer/license.txt

# Set up ANTs
COPY ANTs /opt/ANTs
RUN echo "export ANTSPATH=/opt/ANTs/bin" >> /etc/profile.d/ants.sh && \
    echo "export PATH=\${ANTSPATH}:\$PATH" >> /etc/profile.d/ants.sh && \
    echo "export ANTSPATH=/opt/ANTs/bin" >> ~/.bashrc && \
    echo "export PATH=\${ANTSPATH}:\$PATH" >> ~/.bashrc && \
    echo "export ANTSPATH=/opt/ANTs/bin" >> ~/profile && \
    echo "export PATH=\${ANTSPATH}:\$PATH" >> ~/.profile

# Install MRtrix3 from dev_sans_cmake branch
RUN git clone https://github.com/MRtrix3/mrtrix3.git /opt/mrtrix3 && \
    cd /opt/mrtrix3 && \
    git checkout dev_sans_cmake && \
    ./configure && \
    ./build && \
    echo "export PATH=\"/opt/mrtrix3/bin:\$PATH\"" >> ~/.bashrc && \
    echo "export PATH=\"/opt/mrtrix3/bin:\$PATH\"" >> ~/.profile && \
    echo "export PATH=\"/opt/mrtrix3/bin:\$PATH\"" >> /etc/profile.d/mrtrix3_path.sh

# Clone and add KUL_VBG to PATH
RUN git clone https://github.com/KUL-Radneuron/KUL_VBG.git /opt/KUL_VBG && \
    cd /opt/KUL_VBG && \
    git checkout dev && \
    echo "export PATH=\$PATH:/opt/KUL_VBG" >> /etc/profile.d/kul_vbg.sh

# Clone FastSurfer and setup environment
RUN git clone --branch stable https://github.com/Deep-MI/FastSurfer.git /opt/FastSurfer && \
    cd /opt/FastSurfer && \
    /opt/conda/bin/conda env create -f ./env/fastsurfer.yml && \
    echo "export PYTHONPATH=\"\${PYTHONPATH}:/opt/FastSurfer\"" >> ~/.bashrc && \
    echo "export PATH=\$PATH:/opt/FastSurfer" >> ~/.bashrc

# Install FSL 6.0.6
COPY fslinstaller.py fslinstaller.py

# Update conda and install dependencies for FSL
RUN /opt/conda/bin/conda update -n base -c defaults conda && \
    /opt/conda/bin/conda install -c conda-forge -y numpy

# Run FSL installer and log output
RUN python3 fslinstaller.py -q -d /usr/local/fsl 2>&1 | tee -a /root/fsl_installation.log

# Set environment variables for FSL
ENV FSLDIR=/usr/local/fsl
ENV PATH=$FSLDIR/bin:$PATH
ENV FSLOUTPUTTYPE=NIFTI_GZ

# Source FSL configuration
RUN echo ". /usr/local/fsl/etc/fslconf/fsl.sh" >> /etc/profile.d/fsl.sh && \
    echo "export FSLDIR=/usr/local/fsl" >> /etc/profile.d/fsl.sh && \
    echo "export PATH=\$FSLDIR/bin:\$PATH" >> /etc/profile.d/fsl.sh && \
    echo "export FSLOUTPUTTYPE=NIFTI_GZ" >> /etc/profile.d/fsl.sh

# Ensure the environment is correctly activated and the PYTHONPATH is set during the build
RUN /bin/bash -c "source /opt/conda/etc/profile.d/conda.sh && conda activate fastsurfer && export PYTHONPATH=\"\${PYTHONPATH}:/opt/FastSurfer\" && python3 /opt/FastSurfer/FastSurferCNN/download_checkpoints.py --all"

# Copy FreeSurfer license
# COPY freesurfer_license.txt /opt/FastSurfer/license.txt

# Install HD-BET
RUN git clone https://github.com/MIC-DKFZ/HD-BET.git /opt/HD-BET && \
    cd /opt/HD-BET && \
    pip3 install -e .

# Download HD-BET model parameters
RUN echo "from HD_BET.utils import maybe_download_parameters\nfor i in range(5):\n    maybe_download_parameters(i)" > /opt/HD-BET/hdbet_models.py && \
    python3 /opt/HD-BET/hdbet_models.py

# Ensure environment variables are sourced in .bashrc
RUN echo "source /etc/profile.d/freesurfer.sh" >> ~/.bashrc
RUN echo "source /etc/profile.d/fsl.sh" >> ~/.bashrc
RUN echo "source /etc/profile.d/ants.sh" >> ~/.bashrc
RUN echo "source /etc/profile.d/mrtrix3_path.sh" >> ~/.bashrc
RUN echo "source /etc/profile.d/kul_vbg.sh" >> ~/.bashrc

# Ensure environment variables are sourced in .profile for non-interactive shells
RUN echo "source /etc/profile.d/freesurfer.sh" >> ~/.profile
RUN echo "source /etc/profile.d/fsl.sh" >> ~/.profile
RUN echo "source /etc/profile.d/ants.sh" >> ~/.profile
RUN echo "source /etc/profile.d/mrtrix3_path.sh" >> ~/.profile
RUN echo "source /etc/profile.d/kul_vbg.sh" >> ~/.profile

# Enable Docker-in-Docker
RUN mkdir -p /var/lib/docker

# Copy the local files to the container's workspace
COPY . /app

# Set the working directory
WORKDIR /app

# Install Python dependencies if any (optional)
# RUN pip3 install -r requirements.txt

# Expose necessary ports (if any)
EXPOSE 80

# Set the entrypoint to run KUL_VBG.sh
COPY entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh
ENTRYPOINT ["/entrypoint.sh"]
